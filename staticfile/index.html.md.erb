---
title: Staticfile Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

## <a id='pushing_apps'></a> Push an App ##

This buildpack will be used if your directory has a `Staticfile` file in the root directory.

For example, in an empty directory:

```bash
echo '<html>hello</html>' > index.html
touch Staticfile
cf push APPNAME -m 64M
```

If your Cloud Foundry deployment does not have the Staticfile Buildpack installed, or the installed version is out of date, you can use the latest version with the command:

```bash
cf push APPNAME -b https://github.com/cloudfoundry/staticfile-buildpack.git -m 64M
```

Why `-m 64M`? Your static assets will be served by [Nginx](http://nginx.com/) and it only requires 20M \[[reference](http://wiki.nginx.org/WhyUseIt)]. The `-m 64M` reduces the RAM allocation from the default 1G allocated to Cloud Foundry containers. In the future there may be a way for a buildpack to indicate its default RAM requirements; but not as of writing.

## <a id='supported_versions'></a>Supported nginx Version ##

The version of nginx used by the staticfile buildpack can be found [in the release notes](https://github.com/cloudfoundry/staticfile-buildpack/releases).

## <a id='configuration'></a> Configuration ##

### <a id='root_folder'></a> Alternate root folder ###
By default, the buildpack will serve `index.html` and all other assets from the root folder of your project.

In many cases, you may have an alternate folder where your HTML/CSS/JavaScript files are to be served from, such as `dist/` or `public/`.

To configure the buildpack add the following line to your `Staticfile`:

```yaml
root: dist
```

### <a id='authentication'></a> Basic authentication ###

Protect your website with a user/password configured via environment variables.

![Basic Authentication](../images/basicauth.png)

Convert the username / password to the required format: http://www.htaccesstools.com/htpasswd-generator/

For example, username `bob` and password `bob` becomes `bob:$apr1$DuUQEQp8$ZccZCHQElNSjrg.erwSFC0`.

Create a file in the root of your application `Staticfile.auth`. This becomes the `.htpasswd` file for nginx to project your site. It can include one or more user/password lines.

```
bob:$apr1$DuUQEQp8$ZccZCHQElNSjrg.erwSFC0
```

Push your application to apply changes to basic auth. Remove the file and push to disable basic auth.

### <a id='directory_index'></a> Directory Index ###

If your site doesn't have a nice `index.html`, you can configure `Staticfile` to display a Directory Index of other files; rather than show a relatively unhelpful 404 error.

![Directory Index](../images/directory-index.png)

Add a line to your `Staticfile` that begins with `directory:`

```
directory: visible
```

### <a id='server_side_includes'></a> Server Side Includes (SSI) ###

Add the following line to your `Staticfile` to enable support for [SSI](https://en.wikipedia.org/wiki/Server_Side_Includes):

```
ssi: enabled
```

### <a id='gzip'></a> GZip Static ###

The [`gzip_static`](http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html) and [`gunzip`](http://nginx.org/en/docs/http/ngx_http_gunzip_module.html) modules are set to `on` by default.
Together, these modules enable Nginx to properly serve compressed files to clients. They also decompress files for clients that do not support compressed content or responses.

If you want to disable these modules, specify the following in your custom `nginx.conf`:

```
gunzip off;
gzip_static off;
```

### <a id='custom_nginx_configuration'></a> Custom Nginx Configuration ###

You can customize the Nginx configuration further, by adding `nginx.conf` and/or `mime.types` to your root folder. (Note that if you specified an [alternate root folder](#root_folder), the files will need to be placed there.)

If the buildpack detects either of these files, they will be used in place of the built-in versions.


## <a id='proxy_support'></a> Proxy Support ##

If you need to use a proxy to download dependencies during staging, you can set
the `http_proxy` and/or `https_proxy` environment variables. For more information, see
the [Proxy Usage Docs](http://docs.cloudfoundry.org/buildpacks/proxy-usage.html).

## <a id='bosh_trusted_cert'></a>BOSH Configured Custom Trusted Certificate Support ##

The staticfile-buildpack, based on nginx, does not make outgoing requests and does not benefit from [BOSH configured custom trusted certificates](http://bosh.io/docs/trusted-certs.html).

## <a id='help_support'></a>Help and Support ##

Join the #buildpacks channel in our [Slack community] (http://slack.cloudfoundry.org/) if you need any further assistance.

For more information about using and extending the Staticfile buildpack in Cloud Foundry, see
the [staticfile-buildpack GitHub repo](https://github.com/cloudfoundry/staticfile-buildpack).

You can find current information about this buildpack on the Staticfile
buildpack [release page](https://github.com/cloudfoundry/staticfile-buildpack/releases) in GitHub.
